# Copyright (C) 2011-2012 G.P. Halkes
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

EXTENSIONS="cxx verbose_compile pkgconfig_dep gettext lfs"
DEFAULT_LINGUAS=nl
INSTALLDIRS="bindir docdir mandir"

checkfunction_internal() {
	clean_cxx

	FUNC="$1"
	CHECKFOR="$2"
	CODE="$3"
	shift 3
	{
		for INCLUDE
		do
			echo "#include ${INCLUDE}"
		done
		cat <<EOF
int main(int argc, char *argv[]) {
	${CODE}
	return 0;
}
EOF
	} > .configcxx.cc

	"${FUNC}" "${CHECKFOR}"
}

checkfunction() {
	checkfunction_internal test_link_cxx "$@"
}
checkfunction_compile() {
	checkfunction_internal test_compile_cxx "$@"
}

test_link_cxx_with_flags() {
	test_link_cxx "$@" "CXXFLAGS=$CXXFLAGS"
}

config() {
	has_support_cxx11
	clean_cxx
	cat > .configcxx.cc <<EOF
#include <transcript/transcript.h>

int main(int argc, char *argv[]) {
	transcript_get_version();
	return 0;
}
EOF
	pkgconfig libtranscript/0.2.0 LIBTRANSCRIPT test_link_cxx || \
		error "!! Can not find libtranscript. libtranscript is required to compile tilde."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <uninorm.h>

int main(int argc, char *argv[]) {
	uint8_t buffer[10];
	size_t buffer_size = sizeof(buffer);
	size_t out_size;
	u8_normalize(UNINORM_NFC, buffer, buffer_size, NULL, &out_size);
	return 0;
}
EOF
	test_link_cxx "libunistring" "TESTLIBS=-lunistring" || \
		error "!! Can not find libunistring library. Libunistring is required to compile libt3window."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <t3widget/widget.h>
using namespace t3_widget;
int main(int argc, char *argv[]) {
	get_version();
	return 0;
}
EOF
	pkgconfig libt3widget/0.5.3 LIBT3WIDGET test_link_cxx_with_flags || \
		error "!! Can not find libt3widget. libt3widget is required to compile tilde."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <t3config/config.h>

int main(int argc, char *argv[]) {
	t3_config_get_version();
	return 0;
}
EOF
	pkgconfig libt3config/0.2.6 LIBT3CONFIG test_link_cxx || \
		error "!! Can not find libt3config. libt3config is required to compile tilde."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <t3highlight/highlight.h>

int main(int argc, char *argv[]) {
	t3_highlight_get_version();
	return 0;
}
EOF
	pkgconfig libt3highlight/0.4.0 LIBT3HIGHLIGHT test_link_cxx || \
		error "!! Can not find libt3highlight. libt3highlight is required to compile tilde."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <stdlib.h>
#include <stdarg.h>

#include <stdio.h>
#include <signal.h>
#include <fnmatch.h>
#include <dirent.h>
int main(int argc, char *argv[]) {
	int fd;
	struct stat statbuf;
	char buf[1024];
	size_t bufsiz;
	va_list ap;

	close(fd);
	fd = creat("path", S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);
	stat("path", &statbuf);
	fchmod(fd, 0644);
	fchown(fd, 0, 0);
	fsync(fd);
	fd = open("name", O_RDONLY);
	unlink("name");
	bufsiz = readlink("path", buf, sizeof(buf));
	fd = mkstemp("pathXXXXXX");
	vsnprintf(buf, sizeof(buf), "fmt", ap);
	pathconf("/", _PC_PATH_MAX);
	return 0;
}
EOF
	test_link_cxx "other required common Un*x functions" || {
		check_message_result "Testing required functions seperatly for debugging purposes"

		checkfunction "close" 'int fd; close(fd);' "<unistd.h>"
		checkfunction "creat" 'int fd = creat("path", S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);' "<sys/types.h>" "<sys/stat.h>" "<fcntl.h>"
		checkfunction "stat" 'struct stat statbuf; stat("path", &statbuf);' "<sys/types.h>" "<sys/stat.h>" "<unistd.h>"
		checkfunction "fchmod" 'int fd; fchmod(fd, 0);' "<sys/stat.h>"
		checkfunction "fchown" 'int fd; fchown(fd, 0, 0);' "<unistd.h>"
		checkfunction "fsync" 'int fd; fsync(fd);' "<unistd.h>"
		checkfunction "open" 'int fd = open("name", O_RDONLY);' "<fcntl.h>" "<sys/stat.h>" "<sys/types.h>"
		checkfunction "unlink" 'unlink("name");' "<unistd.h>"
		checkfunction "readlink" 'char buf[1024]; size_t bufsiz; bufsiz = readlink("path", buf, sizeof(buf));' "<unistd.h>"
		checkfunction "mkstemp" 'mkstemp("pathXXXXXX");' "<stdlib.h>"
		checkfunction "vsnprintf" 'char buf[1024]; va_list ap; vsnprintf(buf, sizeof(buf), "fmt", ap);' "<stdio.h>" "<stdarg.h>"
		checkfunction "pathconf" 'pathconf("/", _PC_PATH_MAX);' "<unistd.h>"
		error "!! A required Un*x function was not found. See config.log for details."
	}

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <string.h>

int main(int argc, char *argv[]) {
	strdup(argv[0]);
	return 0;
}
EOF
	test_link_cxx "strdup" && CONFIGFLAGS="${CONFIGFLAGS} -DHAS_STRDUP"

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <stdlib.h>
#include <attr/libattr.h>

int main(int argc, char *argv[]) {
	attr_copy_file(argv[1], argv[2], NULL, NULL);
}
EOF
	if test_link_cxx "libattr" TESTLIBS=-lattr ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DHAS_LIBATTR"
		CONFIGLIBS="${CONFIGLIBS} -lattr"
	fi

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <stdlib.h>
#include <acl/libacl.h>

int main(int argc, char *argv[]) {
	perm_copy_file(argv[1], argv[2], NULL);
}
EOF
	if test_link_cxx "libacl" TESTLIBS=-lacl ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DHAS_LIBACL"
		CONFIGLIBS="${CONFIGLIBS} -lacl"
	fi

	create_makefile "CONFIGFLAGS=${CONFIGFLAGS} ${LIBTRANSCRIPT_FLAGS} ${LIBT3WIDGET_FLAGS} ${LIBT3CONFIG_FLAGS} ${LIBT3HIGHLIGHT_FLAGS}" \
		"CONFIGLIBS=${CONFIGLIBS} ${LIBTRANSCRIPT_LIBS} -lunistring ${LIBT3WIDGET_LIBS} ${LIBT3CONFIG_LIBS} ${LIBT3HIGHLIGHT_LIBS}"
}
